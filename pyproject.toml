[tool.poetry]
name = "refreshcss"
version = "0.2.0"
description = "Removes unused classes, ids, and element selectors from CSS."
authors = ["adamghill <adamghill@yahoo.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/adamghill/refreshcss/"
homepage = "https://github.com/adamghill/refreshcss/"
documentation = "https://github.com/adamghill/refreshcss/"
keywords = ["django", "python", "css", "html"]

[tool.poetry.urls]
"Funding" = "https://github.com/sponsors/adamghill"

[tool.poetry.dependencies]
python = "^3.10"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.1"
pytest-django = "^4.8.0"
django = "^5.0.6"
django-compressor = "^4.4"
pytest-cov = "^5.0.0"
mypy = "^1.10.0"
django-stubs = "^5.0.2"
pytest-benchmark = "^4.0.0"

[tool.ruff]
src = ["refreshcss"]
exclude = []
target-version = "py38"
line-length = 120

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Ignore unused variables
  "F841",
   # Ignore exception strings
  "EM101", "EM102",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["coltrane"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252", "ARG001"]

[tool.pytest.ini_options]
addopts = "--quiet --failed-first -p no:warnings --benchmark-skip"
testpaths = [
    "tests"
]
markers = [
    "slow: marks tests as slow",
]
pythonpath = [
  "site"
]

[tool.poe.tasks.t]
cmd = "pytest"
help = "Run pytest"

[tool.poe.tasks.tb]
cmd = "pytest tests/benchmarks/ --benchmark-autosave --benchmark-only"
help = "Run Python unit tests with benchmarks"

[tool.poe.tasks.tbc]
cmd = "pytest tests/benchmarks/ --benchmark-only --benchmark-compare"
help = "Run Python unit tests with compared benchmarks"

[tool.poe.tasks.tc]
cmd = "pytest --cov=refreshcss"
help = "Run tests with coverage"

[tool.poe.tasks.cr]
cmd = "coverage report"
help = "Show coverage report"

[tool.poe.tasks.my]
cmd = "mypy ."
help = "Run mypy"

[tool.poe.tasks.rf]
cmd = "ruff check ."
help = "Run ruff"

[tool.poe.tasks.tm]
sequence = ["rf", "tc", "my"]
help = "Run all the dev things"

[tool.poe.tasks.publish]
shell = "poetry publish --build -r test && poetry publish"
help = "Publish"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
